An R package for named capture regular expressions

| [[file:tests/testthat][tests]]    | [[https://travis-ci.org/tdhock/namedCapture][https://travis-ci.org/tdhock/namedCapture.png?branch=master]]                           |
| [[https://github.com/jimhester/covr][coverage]] | [[https://coveralls.io/github/tdhock/namedCapture?branch=master][https://coveralls.io/repos/tdhock/namedCapture/badge.svg?branch=master&service=github]] |

The namedCapture package provides user-friendly functions for
extracting data tables from non-tabular text using named capture
regular expressions.

** Installation

#+BEGIN_SRC R
install.packages("namedCapture")
##OR:
if(!require(devtools))install.packages("devtools")
devtools::install_github("tdhock/namedCapture")
#+END_SRC

** Usage overview

There are five main functions provided in namedCapture:

|                             | Extract first match  | Extract each match       |
| chr subject + two arguments | =str_match_named=    | =str_match_all_named=    |
| chr subject + variable args | =str_match_variable= | =str_match_all_variable= |
| df subject + variable args  | =df_match_variable=  | Not implemented          |

The function prefix indicates the type of the first argument, which
must contain the subject:
- =str_*= means a character vector -- each of these functions uses a
  single named capture regular expression to extract data from a
  character vector subject.
- =df_*= means a data.frame -- the =df_match_variable= function uses a
  different named capture regular expression to extract data from each
  of several specified character column subjects. 
The function suffix indicates the type of the other arguments (after
the first):
- =*_named= means three arguments: subject, pattern, functions. The
  pattern should be a length-1 character vector that contains named
  capture groups, e.g. "(?P<groupName1>subPattern1)", read the [[https://cloud.r-project.org/web/packages/namedCapture/vignettes/v1-old-syntax.html][Old three
  argument syntax]] vignette for more info.
- =*_variable= means a variable number of arguments in which the
  pattern is specified using character strings, type conversion
  functions, and lists. Read the [[https://cloud.r-project.org/web/packages/namedCapture/vignettes/v2-recommended-syntax.html][Recommended variable argument syntax]] vignette for
  more info about this powerful and user-friendly syntax, which is the
  suggested way of using namedCapture.
  
Additional vignettes:
- [[https://cloud.r-project.org/web/packages/namedCapture/vignettes/v3-verbose.html][Comparing verbose regex syntax]] shows comparisons with =PCRE_EXTENDED= mode and the =rex= R package.
- [[https://cloud.r-project.org/web/packages/namedCapture/vignettes/v4-data-frames.html][Comparing regex functions for data.frames]] shows comparisons with the =tidyr= R package.

** Choice of regex engine

By default, namedCapture uses RE2 if the re2r package is available,
and PCRE otherwise. 
- RE2 uses a polynomial time matching algorithm, so can be faster than
  PCRE (worst case exponential time).
- RE2 does not support [[https://www.regular-expressions.info/backref.html][backreferences]], but PCRE does.
- RE2 only supports =(?P<groupName>groupPattern)= syntax for named
  groups, whereas PCRE also supports =(?<groupName>groupPattern)=
  syntax (without the initial P).

To tell namedCapture that you would like to use PCRE even if RE2 is available, use
#+BEGIN_SRC R
options(namedCapture.engine="PCRE")
#+END_SRC

** Named capture regular expressions tutorial

For a more complete introduction to named capture regular expressions
in R and Python, see https://github.com/tdhock/regex-tutorial

** Related work
See my [[https://github.com/tdhock/namedCapture-article][journal paper about namedCapture]] for a detailed discussion of R regex packages. Summary below:
- =regexec= and =regmatches= in base R implement extracting capture
  groups but the =regexec= man page indicates that perl=TRUE (and thus
  named capture) is not implemented.
- from R-3.4.0, =utils::strcapture= is an alternative to
  =namedCapture::str_match_named= (extract first match from each
  subject), but there is still no alternative for
  =namedCapture::str_match_all_named= (extract all matches from each
  subject).
- =stringr::str_match= implements extracting capture groups. But since
  it uses the [[https://github.com/gagolews/stringi][stringi]] package (an interface to the [[http://userguide.icu-project.org/strings/regexp][ICU]] library), [[https://github.com/hadley/stringr/pull/16][it
  does not support named capture]].
- [[https://github.com/MangoTheCat/rematch2][rematch2::re_match]], [[https://github.com/kevinushey/rex][rex::re_matches]], and [[https://github.com/qinwf/re2r][re2r::re2_match]] provide similar functionality
  to =namedCapture::str_match_named=. The main difference is that re2r
  uses the RE2 C++ library (worse case polynomial time complexity),
  but rematch2, rex, and namedCapture use base R (PCRE C library, exponential
  worst case time complexity).
- [[https://tidyr.tidyverse.org/reference/separate.html][tidyr::separate]] and [[https://tidyr.tidyverse.org/reference/extract.html][tidyr::extract]] provide similar functionality to
  =namedCapture::df_match_variable= (all input data.frame to extract
  from, and output data.frame). However there are a few differences:
  - named capture groups are supported in =df_match_variable= but not in =tidyr=.
  - namedCapture is much easier to install (it has no compiled code,
    and does not depend on any other packages).
  - A single call to =separate= or =extract= outputs new data columns
    from a single input data column, whereas a single call to
    =df_match_variable= can output new data columns from multiple
    input data columns.
  - regex is used in =separate= for the group separator, whereas regex
    is used in =df_match_variable= and =extract= for the entire text
    (including groups).
  - group names are specified using the =into= argument of =separate=
    and =extract=, whereas group names are specified using R argument
    names / capture group names in =df_match_variable=.
  - =type.convert(as.is=TRUE)= is always used to define types in
    =separate= and =extract=, whereas any function can be used to
    define types in =df_match_variable=.
- [[https://github.com/kevinushey/rex][rex]] provides functions (a domain specific language) for verbosely defining named capture regular expressions in R code. In rex 
  rex(capture(name = "fruit", pattern)) is the analog of list(fruit=pattern) namedCapture::*_variable -- both will generate a capture group named fruit.
- [[https://github.com/tdhock/revector][revector]] provides fast C code for a
  *vector* of named capture regular expressions (namedCapture and base
  R and only provide functions for a single regular expression).

| Package      | First match              | All matches             | library  | subject | pattern      | outputs     | named | types |
|--------------+--------------------------+-------------------------+----------+---------+--------------+-------------+-------+-------|
| base         | regexpr                  | gregexpr                | PCRE/TRE | chr     | chr          | mat/list    | yes   | no    |
| utils        | strcapture               | NA                      | PCRE/TRE | chr     | chr          | df          | no    | some  |
| namedCapture | str_match_named          | str_match_all_named     | PCRE     | chr     | chr          | mat/df/list | yes   | any   |
| namedCapture | str_match_variable       | str_match_all_variable  | PCRE     | chr     | verbose      | mat/df/list | yes   | any   |
| namedCapture | df_match_variable        | NA                      | PCRE     | df/dt   | verbose      | df/dt       | yes   | any   |
| rex          | re_matches(global=FALSE) | re_matches(global=TRUE) | PCRE     | chr     | verbose      | df          | yes   | no    |
| stringr      | str_match                | str_match_all           | ICU      | chr     | chr          | mat/list    | no    | no    |
| stringi      | stri_match               | stri_match_all          | ICU      | chr     | chr          | mat/list    | no    | no    |
| tidyr        | extract                  | NA                      | ICU      | df/dt   | chr          | df/dt       | no    | some  |
| rematch2     | re_match                 | re_match_all            | PCRE/TRE | chr     | chr          | tibble      | yes   | no    |
| re2r         | re2_match                | re2_match_all           | RE2      | chr     | chr/compiled | df/list     | yes   | no    |

Note in the comparison table above:
- library gives the underlying C library used.
- subject/pattern/output gives the support input/output types.
- the "named" column refers to named capture group support,
  which greatly helps to make a more readable regex pattern. The
  namedCapture package is the only one that provides output with
  names/rownames based on the "name" capture group.
- the "types" column refers to built-in support for converting capture
  groups from character to other types. (it is always possible to
  convert types afterwards)


